runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
ggplot(data=Simulator) +
geom_point(aes(x=Tee_Width_no_abs, y=Tee_Length))
}
# Call the function with the desired number of trials
runGolfSimulator2(1500)  # You can replace 1100 with any number of trials you want
library(tidyverse)
Par3Out <- all_data$Par3Out
Par3Out <- Par3Out %>%
rename(Approach_Dist='Approach Dist',G_ES = 'G E(S)', R_ES='R E(S)', H_ES='H E(S)')
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
ggplot(data=Simulator) +
geom_point(aes(x=Tee_Width_no_abs, y=Tee_Length))
}
# Call the function with the desired number of trials
runGolfSimulator2(100)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
ggplot(data=Simulator) +
geom_point(aes(x=Tee_Width_no_abs, y=Tee_Length_no_abs))
}
# Call the function with the desired number of trials
runGolfSimulator2(100)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
ggplot(data=Simulator) +
geom_point(aes(x=Tee_Width_no_abs, y=Tee_Length_no_abs))
}
# Call the function with the desired number of trials
runGolfSimulator2(500)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
# Define rectangles data
rects <- data.frame(xstart = c(-120, -40, -20, 20, 40),
xend = c(-40, -20, 20, 40, 120),
col = c("red", "darkgreen", "green", "darkgreen", "red"))
custom_labels <- c("Hazard" = "red", "Rough" = "darkgreen", "Fairway" = "green")
# Create the plot
plot_2 <- ggplot(data = Simulator) +
geom_point(aes(x = Tee_Width_no_abs, y = Tee_Length_no_abs), alpha = 0.15) +
geom_rect(data = rects, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.35) +
scale_fill_manual(values = rects$col, breaks = unique(rects$col), labels = c("Hazard", "Rough", "Fairway")) + # Specify breaks
guides(fill = guide_legend(title = "Legend"))+
scale_x_continuous(breaks=seq(-100,100,by=20)) +
theme_minimal() +
labs(x = "Tee Width", y = "Tee Length", t)
print(plot_2)
}
# Call the function with the desired number of trials
runGolfSimulator2(500)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
# Define rectangles data
rects <- data.frame(xstart = c(-90, -30, -10, 10, 30),
xend = c(-30, -10, 10, 30, 90),
col = c("red", "darkgreen", "green", "darkgreen", "red"))
custom_labels <- c("Hazard" = "red", "Rough" = "darkgreen", "Fairway" = "green")
# Create the plot
plot_2 <- ggplot(data = Simulator) +
geom_point(aes(x = Tee_Width_no_abs, y = Tee_Length_no_abs), alpha = 0.15) +
geom_rect(data = rects, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.35) +
scale_fill_manual(values = rects$col, breaks = unique(rects$col), labels = c("Hazard", "Rough", "Fairway")) + # Specify breaks
guides(fill = guide_legend(title = "Legend"))+
scale_x_continuous(breaks=seq(-100,100,by=20)) +
theme_minimal() +
labs(x = "Tee Width", y = "Tee Length", t)
print(plot_2)
}
# Call the function with the desired number of trials
runGolfSimulator2(500)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
# Define rectangles data
rects <- data.frame(xstart = c(-90, -30, -10, 10, 30),
xend = c(-30, -10, 10, 30, 90),
col = c("red", "darkgreen", "green", "darkgreen", "red"))
custom_labels <- c("Hazard" = "red", "Rough" = "darkgreen", "Fairway" = "green")
# Create the plot
plot_2 <- ggplot(data = Simulator) +
geom_point(aes(x = Tee_Width_no_abs, y = Tee_Length_no_abs), alpha = 0.15) +
geom_rect(data = rects, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.35) +
scale_fill_manual(values = rects$col, breaks = unique(rects$col), labels = c("Hazard", "Rough", "Fairway")) + # Specify breaks
guides(fill = guide_legend(title = "Legend"))+
scale_x_continuous(breaks=seq(-100,100,by=10)) +
theme_minimal() +
labs(x = "Tee Width", y = "Tee Length", t)
print(plot_2)
}
# Call the function with the desired number of trials
runGolfSimulator2(500)  # You can replace 1100 with any number of trials you want
runGolfSimulator2 <- function(num_trials,
Tee.Shot.Distance = 120,
SD.Angle = 8,
Semicircle.Green.Radius = 25,
Center.to.Hazard.Edge = 30) {
# Create Simulator data frame
Simulator <- data.frame(
Trial = 1:num_trials,
Tee_Degrees = rep(NA, num_trials),
Tee_Length = rep(NA, num_trials),
Tee_Width = rep(NA, num_trials),
Outcome = rep(NA, num_trials),
Approach_Dist = rep(NA, num_trials),
Score = rep(NA, num_trials)
)
for (i in 1:nrow(Simulator)) {
Simulator$Tee_Degrees_no_abs[i] <- SD.Angle * (rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Width_no_abs[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Degrees[i] <- SD.Angle * abs(rnorm(1, mean = 0, sd = 1))
Simulator$Tee_Length[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Tee_Length_no_abs[i] <- Tee.Shot.Distance *
cos(Simulator$Tee_Degrees_no_abs[i] * (pi/180))
Simulator$Tee_Width[i] <- Tee.Shot.Distance *
sin(Simulator$Tee_Degrees[i] * (pi/180))
Simulator$Approach_Dist[i] <- sqrt((Tee.Shot.Distance - Simulator$Tee_Length[i])^2 + Simulator$Tee_Width[i]^2)
Simulator$Outcome[i] <- ifelse(Simulator$Approach_Dist[i] < Semicircle.Green.Radius, "G", ifelse(Simulator$Tee_Width[i] < Center.to.Hazard.Edge, "R", "H"))
# Calculate Score based on Outcome
temp_score <- ifelse(Simulator$Outcome[i] == 'G',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "G_ES"] + 1,
ifelse(Simulator$Outcome[i] == 'R',
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "R_ES"] + 1,
Par3Out[which(Par3Out$Approach_Dist == floor(Simulator$Approach_Dist[i])), "H_ES"] + 1))
# Unlist to convert to numeric vector
temp_score <- unlist(temp_score)
# Assign the value to Score
Simulator$Score[i] <- temp_score[1]
}
distribution <- Simulator %>%
group_by(Outcome) %>%
count() %>%
mutate(percent = n/num_trials * 100)
# Print the updated Simulator data frame
print(Simulator)
cat("Average:", mean(Simulator$Score))
print(distribution)
# Define rectangles data
rects <- data.frame(xstart = c(-90, -30, -10, 10, 30),
xend = c(-30, -10, 10, 30, 90),
col = c("red", "darkgreen", "green", "darkgreen", "red"))
custom_labels <- c("Hazard" = "red", "Rough" = "darkgreen", "Fairway" = "green")
# Create the plot
plot_2 <- ggplot(data = Simulator) +
geom_point(aes(x = Tee_Width_no_abs, y = Tee_Length_no_abs), alpha = 0.15) +
geom_rect(data = rects, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.35) +
scale_fill_manual(values = rects$col, breaks = unique(rects$col), labels = c("Hazard", "Rough", "Fairway")) + # Specify breaks
guides(fill = guide_legend(title = "Legend"))+
scale_x_continuous(breaks=seq(-100,100,by=10)) +
theme_minimal() +
labs(x = "Tee Width", y = "Tee Length", t)
print(plot_2)
ggsave("plot_2.png", plot = plot_2, width = 10, height = 8, dpi = 300)
}
# Call the function with the desired number of trials
runGolfSimulator2(500)  # You can replace 1100 with any number of trials you want
calculate_maintenance_cost <- function(length_manicured_land, width_manicured_land, radius_green,
length_fairway, width_fairway, length_tee_box, width_tee_box,
length_bunker, width_bunker,
cost_per_unit_square_green, cost_per_unit_square_fairway,
cost_per_unit_square_tee_box, cost_per_unit_square_bunker,cost_per_unit_square_rough) {
# Calculate the area of the manicured land
area_manicured_land <- length_manicured_land * width_manicured_land
# Calculate the area of the green (which is a semicircle)
area_green <- (pi * radius_green^2) / 2
# Calculate the area of the fairway
area_fairway <- length_fairway * width_fairway
# Calculate the area of the tee box
area_tee_box <- length_tee_box * width_tee_box
# Calculate the area of the bunker
area_bunker <- length_bunker * width_bunker
# Calculate the area of the rough (remaining area of the manicured land)
area_rough <- area_manicured_land - area_green - area_fairway - area_tee_box - area_bunker
# Calculate the total maintenance cost for each area
total_cost_green <- area_green * cost_per_unit_square_green
total_cost_fairway <- area_fairway * cost_per_unit_square_fairway
total_cost_tee_box <- area_tee_box * cost_per_unit_square_tee_box
total_cost_bunker <- area_bunker * cost_per_unit_square_bunker
total_cost_rough <- area_rough * cost_per_unit_square_rough # Assuming same cost as manicured land
# Calculate the total maintenance cost for the entire field
total_cost <- total_cost_green + total_cost_fairway +
total_cost_tee_box + total_cost_bunker + total_cost_rough
return(total_cost)
}
# Example usage:
cost <- calculate_maintenance_cost(length_manicured_land = 100, width_manicured_land = 80,
radius_green = 20, length_fairway = 60, width_fairway = 20,
length_tee_box = 10, width_tee_box = 10, length_bunker = 20,
width_bunker = 10,
cost_per_unit_square_green = 2, cost_per_unit_square_fairway = 1.5,
cost_per_unit_square_tee_box = 1.2, cost_per_unit_square_bunker = 1.8,
cost_per_unit_square_rough=1)
# Print the result using cat
cat("Cost of Maintenance:", cost, "\n")
savehistory("C:/Users/Aayush/Documents/Golf project/lost file.Rhistory")
